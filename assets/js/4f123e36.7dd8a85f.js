"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[128],{3905:function(e,n,t){t.d(n,{Zo:function(){return l},kt:function(){return m}});var o=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function u(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=o.createContext({}),p=function(e){var n=o.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},l=function(e){var n=p(e.components);return o.createElement(s.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},d=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,s=e.parentName,l=u(e,["components","mdxType","originalType","parentName"]),d=p(t),m=r,h=d["".concat(s,".").concat(m)]||d[m]||c[m]||a;return t?o.createElement(h,i(i({ref:n},l),{},{components:t})):o.createElement(h,i({ref:n},l))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,i=new Array(a);i[0]=d;var u={};for(var s in n)hasOwnProperty.call(n,s)&&(u[s]=n[s]);u.originalType=e,u.mdxType="string"==typeof e?e:r,i[1]=u;for(var p=2;p<a;p++)i[p]=t[p];return o.createElement.apply(null,i)}return o.createElement.apply(null,t)}d.displayName="MDXCreateElement"},8653:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return u},contentTitle:function(){return s},metadata:function(){return p},toc:function(){return l},default:function(){return d}});var o=t(7462),r=t(3366),a=(t(7294),t(3905)),i=["components"],u={sidebar_position:3},s="Input Mode",p={unversionedId:"Gameplay/InputMode",id:"Gameplay/InputMode",isDocsHomePage:!1,title:"Input Mode",description:"The Input Mode class is a handy way to switch between several modes of input.",source:"@site/docs/Gameplay/InputMode.md",sourceDirName:"Gameplay",slug:"/Gameplay/InputMode",permalink:"/docs/Gameplay/InputMode",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Flying Movement",permalink:"/docs/Gameplay/FlyingMovement"},next:{title:"Collections",permalink:"/docs/Collections/Collections"}},l=[{value:"Checking for InputMode",id:"checking-for-inputmode",children:[],level:2},{value:"The Debug Mode",id:"the-debug-mode",children:[],level:2}],c={toc:l};function d(e){var n=e.components,t=(0,r.Z)(e,i);return(0,a.kt)("wrapper",(0,o.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"input-mode"},"Input Mode"),(0,a.kt)("p",null,"The Input Mode class is a handy way to switch between several modes of input.\nFor example, when the game is paused or we are in an UI inventory we want the ",(0,a.kt)("strong",{parentName:"p"},"cursor to be visible and the cursor's lockstate to be confined"),". In this case we would set the ",(0,a.kt)("strong",{parentName:"p"},"InputMode to UI"),". When unpausing or when closing our inventory we once again put our ",(0,a.kt)("strong",{parentName:"p"},"InputMode to Game")," and the cursor will be ",(0,a.kt)("strong",{parentName:"p"},"hidden and locked"),"."),(0,a.kt)("p",null,"This also allows us to check our InputMode before handling input. We don't want our character to be able to walk around when we are managing our inventory."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cs"},"using UnityEngine;\nusing ExtensionTools;\npublic class Inventory : MonoBehaviour\n{\n    void OpenInventory()\n    {\n        //Enable cursor and unlock\n        InputMode.SetInputModeUI();\n    }\n\n    void CloseInventory() {\n        //Hide cursor and lock\n        InputMode.SetInputModeGame();\n    }\n}\n\n")),(0,a.kt)("p",null,"In some cases you might want your cursor to be visible in the Game Mode as well, for example when creating a card game. To do this you have two options."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Option one")," is to pass a GameModeSettings class everytime you change the inputmode back to Game Mode."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cs"},"InputMode.SetInputModeGame(new InputMode.GameModeSettings(CursorLockMode.Confined,true));\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Option two")," is to override the default GameModeSettings somewhere in the start of the game. Now you don't have to pass GameModeSettings everytime you change the Inputmode back to Game."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cs"},"InputMode.SetDefaultGameModeSettings(new InputMode.GameModeSettings(CursorLockMode.Confined, true));\n")),(0,a.kt)("h2",{id:"checking-for-inputmode"},"Checking for InputMode"),(0,a.kt)("p",null,"When writing our character movement or input in game we don't want it to be called when we are in the UI Game Mode. It doesn't make sense to be able to move our character when we are in a pause menu or in our inventory.\nSo we just write a simple if statement before our movement code."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cs"},"if (InputMode.currentInputmode == InputMode.Input.Game)\n{ \n      //movement code\n}\n")),(0,a.kt)("h2",{id:"the-debug-mode"},"The Debug Mode"),(0,a.kt)("p",null,"The Debug Mode is a handy mode during development of your game but should only be used for development purposes. By default switching to this Inputmode will enable the ",(0,a.kt)("a",{parentName:"p",href:"../Camera/DebugCamera"},"Debug Camera")," and allow you to move around in your scene without disturbing the flow of the game. Think of it as a sort of God Mode for development purposes."),(0,a.kt)("p",null,"The recommended way to switch to the Debug Mode is by using the ",(0,a.kt)("a",{parentName:"p",href:"../Console/OpeningAndUsingTheConsole"},"Console")))}d.isMDXComponent=!0}}]);