"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[897],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return m}});var o=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,i=function(e,t){if(null==e)return{};var n,o,i={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=o.createContext({}),c=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},u=function(e){var t=c(e.components);return o.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},b=o.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),b=c(n),m=i,d=b["".concat(s,".").concat(m)]||b[m]||p[m]||r;return n?o.createElement(d,a(a({ref:t},u),{},{components:n})):o.createElement(d,a({ref:t},u))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,a=new Array(r);a[0]=b;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,a[1]=l;for(var c=2;c<r;c++)a[c]=n[c];return o.createElement.apply(null,a)}return o.createElement.apply(null,n)}b.displayName="MDXCreateElement"},2206:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return c},toc:function(){return u},default:function(){return b}});var o=n(7462),i=n(3366),r=(n(7294),n(3905)),a=["components"],l={sidebar_position:2},s="Object Pooling",c={unversionedId:"Utilities/ObjectPooling",id:"Utilities/ObjectPooling",isDocsHomePage:!1,title:"Object Pooling",description:"If you've been working in Game Development for a while you might be familiar with the concept of object pooling. Object pooling lets you reuse objects so you don't have to allocate new memory everytime you want to spawn an Object.",source:"@site/docs/Utilities/ObjectPooling.md",sourceDirName:"Utilities",slug:"/Utilities/ObjectPooling",permalink:"/ExtensionToolsForUnitySite/docs/Utilities/ObjectPooling",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Mono Singletons",permalink:"/ExtensionToolsForUnitySite/docs/Utilities/Singleton"},next:{title:"GizmosExtended",permalink:"/ExtensionToolsForUnitySite/docs/Utilities/Gizmos"}},u=[{value:"Creating the Object Pool",id:"creating-the-object-pool",children:[],level:2},{value:"Releasing Pooled Objects",id:"releasing-pooled-objects",children:[],level:2}],p={toc:u};function b(e){var t=e.components,n=(0,i.Z)(e,a);return(0,r.kt)("wrapper",(0,o.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"object-pooling"},"Object Pooling"),(0,r.kt)("p",null,"If you've been working in Game Development for a while you might be familiar with the concept of object pooling. ",(0,r.kt)("strong",{parentName:"p"},"Object pooling lets you reuse objects")," so you don't have to allocate new memory everytime you want to spawn an Object."),(0,r.kt)("p",null,"In the ExtensionTools there's a ",(0,r.kt)("strong",{parentName:"p"},"simple solution for pooling GameObjects"),". This is ideal for situations where you have to spawn a lot of GameObjects from the same Prefab, such as shooting a gun and spawning bullets."),(0,r.kt)("h2",{id:"creating-the-object-pool"},"Creating the Object Pool"),(0,r.kt)("p",null,"Creating the Object Pool is very easy to do. Let us take the example of shooting a gun and spawning bullets."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},"using ExtensionTools.ObjectPooling;\npublic class Gun : MonoBehaviour\n{\n    [SerializeField]\n    GameObject m_BulletPrefab;\n\n    [SerializeField]\n    int m_MaximumBullets= 10;\n\n    UnityObjectPool m_ObjectPool;\n    void Start() {\n        m_ObjectPool = new UnityObjectPool(m_BulletPrefab, m_MaximumBullets, false);\n    }\n}\n\n")),(0,r.kt)("p",null,"When we take a look at the declaration of the UnityObjectPool we can see what's happening."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},"public UnityObjectPool(GameObject prefab,int initialpoolSize=10,bool autoExpand=false, LogLevel logLevel=LogLevel.Warning)\n")),(0,r.kt)("p",null,"First we pass the BulletPrefab this is the Prefab which will be instantiated and reused. Now we set the initial pool size this is the amount of bullets that we can have concurrently. "),(0,r.kt)("p",null,"And finally we set Auto expand to false, Setting this to true would allow the pool to grow above the initial pool size when needed. Since we disabled this the oldest GameObject will be used instead when we reached the Maximum Pool Size."),(0,r.kt)("p",null,"Now we can spawn the bullet."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Important! Make sure to reset all the necessary values since we are reusing GameObjects and not spawning new ones")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},"void SpawnBullet() {\n   GameObject go = m_ObjectPool.SpawnObject(transform.position, Quaternion.identity, this.transform);\n   go.GetComponent<Rigidbody>().velocity = (transform.forward * 10);\n}\n")),(0,r.kt)("h2",{id:"releasing-pooled-objects"},"Releasing Pooled Objects"),(0,r.kt)("p",null,"In most cases we also want to ",(0,r.kt)("strong",{parentName:"p"},"Release")," our Objects. This will mark them as inactive and will tell our ObjectPool that they are ready to be reused.\nThis is especially important when enabling ",(0,r.kt)("strong",{parentName:"p"},"autoExpand")," because the Object Pool will keep creating new Objects when no Objects are marked to be reused."),(0,r.kt)("p",null,"Releasing an Object is done by getting the ",(0,r.kt)("strong",{parentName:"p"},"UnityPooledObject component")," on the GameObject and calling ",(0,r.kt)("strong",{parentName:"p"},"Release()"),";"),(0,r.kt)("p",null,"Let's say we want our bullets to be released when they hit an obstacle. We can easily implement this using the ",(0,r.kt)("a",{parentName:"p",href:"../Events/GameObjectEvents"},"EventListener")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},"void SpawnBullet() {\n   GameObject go = m_ObjectPool.SpawnObject(transform.position, Quaternion.identity, this.transform);\n   go.GetComponent<Rigidbody>().velocity = (transform.forward * 10);    \n    \n   go.GetEventListener().OnCollisionEntered = null; //We clear all bindings first since we reuse Objects\n   go.GetEventListener().OnCollisionEntered += (Collision col) => { go.GetComponent<UnityPooledObject>().Release(); };\n}\n\n")))}b.isMDXComponent=!0}}]);