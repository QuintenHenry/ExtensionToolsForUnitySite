"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[180],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return d}});var a=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var c=a.createContext({}),l=function(e){var n=a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},u=function(e){var n=l(e.components);return a.createElement(c.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},p=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,r=e.originalType,c=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=l(t),d=i,g=p["".concat(c,".").concat(d)]||p[d]||m[d]||r;return t?a.createElement(g,o(o({ref:n},u),{},{components:t})):a.createElement(g,o({ref:n},u))}));function d(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=t.length,o=new Array(r);o[0]=p;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s.mdxType="string"==typeof e?e:i,o[1]=s;for(var l=2;l<r;l++)o[l]=t[l];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}p.displayName="MDXCreateElement"},2452:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return s},contentTitle:function(){return c},metadata:function(){return l},toc:function(){return u},default:function(){return p}});var a=t(7462),i=t(3366),r=(t(7294),t(3905)),o=["components"],s={sidebar_position:2},c="Creating custom animations",l={unversionedId:"Animations/Creating custom animations",id:"Animations/Creating custom animations",isDocsHomePage:!1,title:"Creating custom animations",description:"Creating custom animations to tween GameObjects is very easy to do. You start by creating a new class which inherits from EAnimation.",source:"@site/docs/Animations/Creating custom animations.md",sourceDirName:"Animations",slug:"/Animations/Creating custom animations",permalink:"/docs/Animations/Creating custom animations",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Moving and transforming",permalink:"/docs/Animations/Moving and transforming"},next:{title:"Debug Camera",permalink:"/docs/Camera/DebugCamera"}},u=[],m={toc:u};function p(e){var n=e.components,t=(0,i.Z)(e,o);return(0,r.kt)("wrapper",(0,a.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"creating-custom-animations"},"Creating custom animations"),(0,r.kt)("p",null,"Creating custom animations to tween GameObjects is very easy to do. You start by creating a new class which inherits from EAnimation."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},"using UnityEngine;\nusing ExtensionTools.Animations;\npublic class ECustomAnimation: EAnimation\n{\n        public ECustomAnimation()\n        {\n            m_OverrideRotation = false;\n            m_OverrideScale = false;\n            m_OverridePosition = false;\n        }\n\n        public override Vector3 GetPosition(float animPercentage)\n        {\n            return Vector3.zero;\n        }\n\n        public override Quaternion GetRotation(float animPercentage)\n        {\n            return Quaternion.identity;\n        }\n\n        public override Vector3 GetScale(float animPercentage)\n        {\n            return Vector3.zero;\n        }\n}\n\n")),(0,r.kt)("p",null,"In the constructor you decide what this animation will affect. In this example we will create an animation which moves from point A to B in a waving pattern, so we only want the position to be changed."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},"m_OverridePosition = true;\n")),(0,r.kt)("p",null,"To be able to know where this animation starts and ends we need to pass these values through the constructor, additionally we also want to know the height of the waves."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},"Vector3 StartPoint;\nVector3 EndPoint;\nfloat WaveHeight;\n\npublic ECustomAnimation(Vector3 start,Vector3 end,float waveheight)\n{\n        StartPoint = start;\n        EndPoint = end;\n        WaveHeight = waveheight;\n\n        m_OverridePosition = true;\n        m_OverrideRotation = false;\n        m_OverrideScale = false;\n}\n")),(0,r.kt)("p",null,"Now we can use these values in our ",(0,r.kt)("strong",{parentName:"p"},"GetPosition")," method to return the animated position."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},"public override Vector3 GetPosition(float animPercentage)\n{\n        float WaveScale = 10f; //This could also be a variable\n\n        Vector3 interPolatedPosition = Vector3.LerpUnclamped(StartPoint, EndPoint, animPercentage);\n        interPolatedPosition += Vector3.up * WaveHeight * Mathf.Sin(animPercentage * WaveScale); //We return the sine wave and add it to the interpolated position;\n\n        return interPolatedPosition;\n}\n")),(0,r.kt)("p",null,"Our animation is finished! Now we can play the animation like this"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},"transform.PlayAnimation(new ECustomAnimation(transform.position, targetPosition, waveHeight),time);\n")),(0,r.kt)("h1",{id:"using-easings"},"Using easings"),(0,r.kt)("p",null,"Easings allow us to change the way we interpolate in our animation. Adding easing to our previous animation is very easy to do.\nFirst we add an easingType as a parameter in our constructor."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},"    EasingType EasingType;\n\n    public ECustomAnimation(Vector3 start,Vector3 end,float waveHeight,EasingType easingType=EasingType.SmoothOut)\n    {\n        StartPoint = start;\n        EndPoint = end;\n        WaveHeight = waveHeight;\n        EasingType = easingType;\n\n        m_OverridePosition = true;\n        m_OverrideRotation = false;\n        m_OverrideScale = false;\n    }\n")),(0,r.kt)("p",null,"Now we can go back to our ",(0,r.kt)("strong",{parentName:"p"},"GetPosition")," method and change the animPercentage like this"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},"public override Vector3 GetPosition(float animPercentage)\n{\n        float WaveScale = 10f; //This could also be a variable\n    \n        animPercentage = Easings.Evaluate(animPercentage, EasingType); //We apply easing\n    \n        Vector3 interPolatedPosition = Vector3.LerpUnclamped(StartPoint, EndPoint, animPercentage);\n        interPolatedPosition += Vector3.up * WaveHeight * Mathf.Sin(animPercentage * WaveScale); //We return the sine wave and add it to the interpolated position;\n\n        return interPolatedPosition;\n}\n")))}p.isMDXComponent=!0}}]);